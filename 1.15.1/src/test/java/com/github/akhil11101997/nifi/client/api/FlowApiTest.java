/*
 * NiFi Rest API
 * The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * OpenAPI spec version: 1.15.1
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.github.akhil11101997.nifi.client.api;

import com.github.akhil11101997.nifi.client.model.AboutEntity;
import com.github.akhil11101997.nifi.client.model.ActionEntity;
import com.github.akhil11101997.nifi.client.model.ActivateControllerServicesEntity;
import com.github.akhil11101997.nifi.client.model.BannerEntity;
import com.github.akhil11101997.nifi.client.model.BucketsEntity;
import com.github.akhil11101997.nifi.client.model.BulletinBoardEntity;
import com.github.akhil11101997.nifi.client.model.ClusteSummaryEntity;
import com.github.akhil11101997.nifi.client.model.ClusterSearchResultsEntity;
import com.github.akhil11101997.nifi.client.model.ComponentHistoryEntity;
import com.github.akhil11101997.nifi.client.model.ConnectionStatisticsEntity;
import com.github.akhil11101997.nifi.client.model.ConnectionStatusEntity;
import com.github.akhil11101997.nifi.client.model.ControllerBulletinsEntity;
import com.github.akhil11101997.nifi.client.model.ControllerServiceTypesEntity;
import com.github.akhil11101997.nifi.client.model.ControllerServicesEntity;
import com.github.akhil11101997.nifi.client.model.ControllerStatusEntity;
import com.github.akhil11101997.nifi.client.model.CurrentUserEntity;
import com.github.akhil11101997.nifi.client.model.FlowConfigurationEntity;
import com.github.akhil11101997.nifi.client.model.HistoryEntity;
import com.github.akhil11101997.nifi.client.model.ParameterContextsEntity;
import com.github.akhil11101997.nifi.client.model.PortStatusEntity;
import com.github.akhil11101997.nifi.client.model.PrioritizerTypesEntity;
import com.github.akhil11101997.nifi.client.model.ProcessGroupFlowEntity;
import com.github.akhil11101997.nifi.client.model.ProcessGroupStatusEntity;
import com.github.akhil11101997.nifi.client.model.ProcessorStatusEntity;
import com.github.akhil11101997.nifi.client.model.ProcessorTypesEntity;
import com.github.akhil11101997.nifi.client.model.RegistryClientsEntity;
import com.github.akhil11101997.nifi.client.model.RemoteProcessGroupStatusEntity;
import com.github.akhil11101997.nifi.client.model.ReportingTaskTypesEntity;
import com.github.akhil11101997.nifi.client.model.ReportingTasksEntity;
import com.github.akhil11101997.nifi.client.model.ScheduleComponentsEntity;
import com.github.akhil11101997.nifi.client.model.SearchResultsEntity;
import com.github.akhil11101997.nifi.client.model.StatusHistoryEntity;
import com.github.akhil11101997.nifi.client.model.StreamingOutput;
import com.github.akhil11101997.nifi.client.model.TemplatesEntity;
import com.github.akhil11101997.nifi.client.model.VersionedFlowSnapshotMetadataSetEntity;
import com.github.akhil11101997.nifi.client.model.VersionedFlowsEntity;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FlowApi
 */
@Ignore
public class FlowApiTest {

    private final FlowApi api = new FlowApi();

    
    /**
     * Enable or disable Controller Services in the specified Process Group.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void activateControllerServicesTest() throws Exception {
        String id = null;
        ActivateControllerServicesEntity body = null;
        ActivateControllerServicesEntity response = api.activateControllerServices(id, body);

        // TODO: test validations
    }
    
    /**
     * Generates a client id.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void generateClientIdTest() throws Exception {
        String response = api.generateClientId();

        // TODO: test validations
    }
    
    /**
     * Retrieves details about this NiFi to put in the About dialog
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAboutInfoTest() throws Exception {
        AboutEntity response = api.getAboutInfo();

        // TODO: test validations
    }
    
    /**
     * Gets an action
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getActionTest() throws Exception {
        String id = null;
        ActionEntity response = api.getAction(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves the banners for this NiFi
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBannersTest() throws Exception {
        BannerEntity response = api.getBanners();

        // TODO: test validations
    }
    
    /**
     * Gets the buckets from the specified registry for the current user
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBucketsTest() throws Exception {
        String id = null;
        BucketsEntity response = api.getBuckets(id);

        // TODO: test validations
    }
    
    /**
     * Gets current bulletins
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBulletinBoardTest() throws Exception {
        String after = null;
        String sourceName = null;
        String message = null;
        String sourceId = null;
        String groupId = null;
        String limit = null;
        BulletinBoardEntity response = api.getBulletinBoard(after, sourceName, message, sourceId, groupId, limit);

        // TODO: test validations
    }
    
    /**
     * Retrieves Controller level bulletins
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBulletinsTest() throws Exception {
        ControllerBulletinsEntity response = api.getBulletins();

        // TODO: test validations
    }
    
    /**
     * The cluster summary for this NiFi
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getClusterSummaryTest() throws Exception {
        ClusteSummaryEntity response = api.getClusterSummary();

        // TODO: test validations
    }
    
    /**
     * Gets configuration history for a component
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getComponentHistoryTest() throws Exception {
        String componentId = null;
        ComponentHistoryEntity response = api.getComponentHistory(componentId);

        // TODO: test validations
    }
    
    /**
     * Gets statistics for a connection
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConnectionStatisticsTest() throws Exception {
        String id = null;
        Boolean nodewise = null;
        String clusterNodeId = null;
        ConnectionStatisticsEntity response = api.getConnectionStatistics(id, nodewise, clusterNodeId);

        // TODO: test validations
    }
    
    /**
     * Gets status for a connection
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConnectionStatusTest() throws Exception {
        String id = null;
        Boolean nodewise = null;
        String clusterNodeId = null;
        ConnectionStatusEntity response = api.getConnectionStatus(id, nodewise, clusterNodeId);

        // TODO: test validations
    }
    
    /**
     * Gets the status history for a connection
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getConnectionStatusHistoryTest() throws Exception {
        String id = null;
        StatusHistoryEntity response = api.getConnectionStatusHistory(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves the types of controller services that this NiFi supports
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getControllerServiceTypesTest() throws Exception {
        String serviceType = null;
        String serviceBundleGroup = null;
        String serviceBundleArtifact = null;
        String serviceBundleVersion = null;
        String bundleGroupFilter = null;
        String bundleArtifactFilter = null;
        String typeFilter = null;
        ControllerServiceTypesEntity response = api.getControllerServiceTypes(serviceType, serviceBundleGroup, serviceBundleArtifact, serviceBundleVersion, bundleGroupFilter, bundleArtifactFilter, typeFilter);

        // TODO: test validations
    }
    
    /**
     * Gets controller services for reporting tasks
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getControllerServicesFromControllerTest() throws Exception {
        ControllerServicesEntity response = api.getControllerServicesFromController();

        // TODO: test validations
    }
    
    /**
     * Gets all controller services
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getControllerServicesFromGroupTest() throws Exception {
        String id = null;
        Boolean includeAncestorGroups = null;
        Boolean includeDescendantGroups = null;
        ControllerServicesEntity response = api.getControllerServicesFromGroup(id, includeAncestorGroups, includeDescendantGroups);

        // TODO: test validations
    }
    
    /**
     * Gets the current status of this NiFi
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getControllerStatusTest() throws Exception {
        ControllerStatusEntity response = api.getControllerStatus();

        // TODO: test validations
    }
    
    /**
     * Retrieves the user identity of the user making the request
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCurrentUserTest() throws Exception {
        CurrentUserEntity response = api.getCurrentUser();

        // TODO: test validations
    }
    
    /**
     * Gets a process group
     *
     * If the uiOnly query parameter is provided with a value of true, the returned entity may only contain fields that are necessary for rendering the NiFi User Interface. As such, the selected fields may change at any time, even during incremental releases, without warning. As a result, this parameter should not be provided by any client other than the UI.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFlowTest() throws Exception {
        String id = null;
        Boolean uiOnly = null;
        ProcessGroupFlowEntity response = api.getFlow(id, uiOnly);

        // TODO: test validations
    }
    
    /**
     * Retrieves the configuration for this NiFi flow
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFlowConfigTest() throws Exception {
        FlowConfigurationEntity response = api.getFlowConfig();

        // TODO: test validations
    }
    
    /**
     * Gets all metrics for the flow from a particular node
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFlowMetricsTest() throws Exception {
        String producer = null;
        StreamingOutput response = api.getFlowMetrics(producer);

        // TODO: test validations
    }
    
    /**
     * Gets the flows from the specified registry and bucket for the current user
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getFlowsTest() throws Exception {
        String registryId = null;
        String bucketId = null;
        VersionedFlowsEntity response = api.getFlows(registryId, bucketId);

        // TODO: test validations
    }
    
    /**
     * Gets status for an input port
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getInputPortStatusTest() throws Exception {
        String id = null;
        Boolean nodewise = null;
        String clusterNodeId = null;
        PortStatusEntity response = api.getInputPortStatus(id, nodewise, clusterNodeId);

        // TODO: test validations
    }
    
    /**
     * Gets status for an output port
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOutputPortStatusTest() throws Exception {
        String id = null;
        Boolean nodewise = null;
        String clusterNodeId = null;
        PortStatusEntity response = api.getOutputPortStatus(id, nodewise, clusterNodeId);

        // TODO: test validations
    }
    
    /**
     * Gets all Parameter Contexts
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getParameterContextsTest() throws Exception {
        ParameterContextsEntity response = api.getParameterContexts();

        // TODO: test validations
    }
    
    /**
     * Retrieves the types of prioritizers that this NiFi supports
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPrioritizersTest() throws Exception {
        PrioritizerTypesEntity response = api.getPrioritizers();

        // TODO: test validations
    }
    
    /**
     * Gets the status for a process group
     *
     * The status for a process group includes status for all descendent components. When invoked on the root group with recursive set to true, it will return the current status of every component in the flow.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getProcessGroupStatusTest() throws Exception {
        String id = null;
        Boolean recursive = null;
        Boolean nodewise = null;
        String clusterNodeId = null;
        ProcessGroupStatusEntity response = api.getProcessGroupStatus(id, recursive, nodewise, clusterNodeId);

        // TODO: test validations
    }
    
    /**
     * Gets status history for a remote process group
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getProcessGroupStatusHistoryTest() throws Exception {
        String id = null;
        StatusHistoryEntity response = api.getProcessGroupStatusHistory(id);

        // TODO: test validations
    }
    
    /**
     * Gets status for a processor
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getProcessorStatusTest() throws Exception {
        String id = null;
        Boolean nodewise = null;
        String clusterNodeId = null;
        ProcessorStatusEntity response = api.getProcessorStatus(id, nodewise, clusterNodeId);

        // TODO: test validations
    }
    
    /**
     * Gets status history for a processor
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getProcessorStatusHistoryTest() throws Exception {
        String id = null;
        StatusHistoryEntity response = api.getProcessorStatusHistory(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves the types of processors that this NiFi supports
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getProcessorTypesTest() throws Exception {
        String bundleGroupFilter = null;
        String bundleArtifactFilter = null;
        String type = null;
        ProcessorTypesEntity response = api.getProcessorTypes(bundleGroupFilter, bundleArtifactFilter, type);

        // TODO: test validations
    }
    
    /**
     * Gets the listing of available registries
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRegistriesTest() throws Exception {
        RegistryClientsEntity response = api.getRegistries();

        // TODO: test validations
    }
    
    /**
     * Gets status for a remote process group
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRemoteProcessGroupStatusTest() throws Exception {
        String id = null;
        Boolean nodewise = null;
        String clusterNodeId = null;
        RemoteProcessGroupStatusEntity response = api.getRemoteProcessGroupStatus(id, nodewise, clusterNodeId);

        // TODO: test validations
    }
    
    /**
     * Gets the status history
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRemoteProcessGroupStatusHistoryTest() throws Exception {
        String id = null;
        StatusHistoryEntity response = api.getRemoteProcessGroupStatusHistory(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves the types of reporting tasks that this NiFi supports
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getReportingTaskTypesTest() throws Exception {
        String bundleGroupFilter = null;
        String bundleArtifactFilter = null;
        String type = null;
        ReportingTaskTypesEntity response = api.getReportingTaskTypes(bundleGroupFilter, bundleArtifactFilter, type);

        // TODO: test validations
    }
    
    /**
     * Gets all reporting tasks
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getReportingTasksTest() throws Exception {
        ReportingTasksEntity response = api.getReportingTasks();

        // TODO: test validations
    }
    
    /**
     * Gets all templates
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTemplatesTest() throws Exception {
        TemplatesEntity response = api.getTemplates();

        // TODO: test validations
    }
    
    /**
     * Gets the flow versions from the specified registry and bucket for the specified flow for the current user
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getVersionsTest() throws Exception {
        String registryId = null;
        String bucketId = null;
        String flowId = null;
        VersionedFlowSnapshotMetadataSetEntity response = api.getVersions(registryId, bucketId, flowId);

        // TODO: test validations
    }
    
    /**
     * Gets configuration history
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void queryHistoryTest() throws Exception {
        String offset = null;
        String count = null;
        String sortColumn = null;
        String sortOrder = null;
        String startDate = null;
        String endDate = null;
        String userIdentity = null;
        String sourceId = null;
        HistoryEntity response = api.queryHistory(offset, count, sortColumn, sortOrder, startDate, endDate, userIdentity, sourceId);

        // TODO: test validations
    }
    
    /**
     * Schedule or unschedule components in the specified Process Group.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void scheduleComponentsTest() throws Exception {
        String id = null;
        ScheduleComponentsEntity body = null;
        ScheduleComponentsEntity response = api.scheduleComponents(id, body);

        // TODO: test validations
    }
    
    /**
     * Searches the cluster for a node with the specified address
     *
     * Note: This endpoint is subject to change as NiFi and it&#39;s REST API evolve.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchClusterTest() throws Exception {
        String q = null;
        ClusterSearchResultsEntity response = api.searchCluster(q);

        // TODO: test validations
    }
    
    /**
     * Performs a search against this NiFi using the specified search term
     *
     * Only search results from authorized components will be returned.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchFlowTest() throws Exception {
        String q = null;
        String a = null;
        SearchResultsEntity response = api.searchFlow(q, a);

        // TODO: test validations
    }
    
}
